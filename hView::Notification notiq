[1mdiff --git a/browser/notifications/notification_message_filter.cc b/browser/notifications/notification_message_filter.cc[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mdiff --git a/shell/BUILD.gn b/shell/BUILD.gn[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex 08a8e79..c32b839[m
[1m--- a/shell/BUILD.gn[m
[1m+++ b/shell/BUILD.gn[m
[36m@@ -381,6 +381,13 @@[m [mstatic_library("content_shell_lib") {[m
   sources += [[m
     "browser/notifications/platform_notification_service_impl.cc",[m
     "browser/notifications/platform_notification_service_impl.h",[m
[32m+[m[32m    "browser/notifications/permission_prompt_impl.cc",[m
[32m+[m[32m    "browser/notifications/permission_prompt_impl.h",[m
[32m+[m[32m    "browser/notifications/web_push_content_views.cc",[m
[32m+[m[32m    "browser/notifications/web_push_content_views.h",[m
[32m+[m[32m    "browser/notifications/notification.cc",[m
[32m+[m[32m    "browser/notifications/notification.h",[m
[32m+[m[32m    "browser/notifications/website_settings_ui.h",[m
   ][m
   deps += [[m
     "//components/gcm_driver",[m
[1mdiff --git a/shell/browser/notifications/platform_notification_service_impl.cc b/shell/browser/notifications/platform_notification_service_impl.cc[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex 1a90d21..cd4b9f6[m
[1m--- a/shell/browser/notifications/platform_notification_service_impl.cc[m
[1m+++ b/shell/browser/notifications/platform_notification_service_impl.cc[m
[36m@@ -30,6 +30,8 @@[m
 [m
 #include "content/shell/browser/shell_host_content_settings_map_factory.h"[m
 #include "components/content_settings/core/browser/host_content_settings_map.h"[m
[32m+[m[32m#include "content/shell/browser/notifications/web_push_content_views.h"[m
[32m+[m
 using content::BrowserContext;[m
 using content::BrowserThread;[m
 [m
[36m@@ -132,10 +134,22 @@[m [mvoid PlatformNotificationServiceImpl::DisplayNotification([m
     const content::NotificationResources& notification_resources,[m
     std::unique_ptr<content::DesktopNotificationDelegate> delegate,[m
     base::Closure* cancel_callback) {[m
[31m-  DCHECK_CURRENTLY_ON(BrowserThread::UI);[m
[32m+[m[32m    DCHECK_CURRENTLY_ON(BrowserThread::UI);[m
[32m+[m
[32m+[m
[32m+[m	[32mWebPushView::Notification noti(NOTIFICATION_TYPE_SIMPLE,///type[m
[32m+[m					[32m  "",///id[m
[32m+[m					[32m  notification_data.title,//title[m
[32m+[m					[32m  base::ASCIIToUTF16(notification_data.lang.c_str()),//message[m
[32m+[m					[32m  gfx::Image(),///icon[m
[32m+[m					[32m  notification_data.body,//display source[m[41m [m
[32m+[m					[32m  GURL(notification_data.tag),//orignal url[m
[32m+[m					[32m  0);[m
[32m+[m
[32m+[m[32m    WebPushView::WebPushViewRequest* req = new WebPushView::WebPushViewRequest(notification_data.title,notification_data.body);[m
[32m+[m[32m    req->DisplayWebPush();[m
   DLOG(WARNING) << "DisplayNotification notification_data.title : " << notification_data.title;[m
   DLOG(WARNING) << "notification_data.body : " << notification_data.body;[m
[31m-  NOTIMPLEMENTED();[m
 }[m
 [m
 void PlatformNotificationServiceImpl::DisplayPersistentNotification([m
[36m@@ -178,4 +192,4 @@[m [mbase::string16 PlatformNotificationServiceImpl::DisplayNameForContextMessage([m
     const GURL& origin) const {[m
 [m
   return base::string16();[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
[1mdiff --git a/shell/browser/notifications/platform_notification_service_impl.h b/shell/browser/notifications/platform_notification_service_impl.h[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex 34286c1..cca308c[m
[1m--- a/shell/browser/notifications/platform_notification_service_impl.h[m
[1m+++ b/shell/browser/notifications/platform_notification_service_impl.h[m
[36m@@ -21,6 +21,9 @@[m
 #include "content/public/common/persistent_notification_status.h"[m
 #include "third_party/WebKit/public/platform/modules/permissions/permission_status.mojom.h"[m
 [m
[32m+[m[32m#include "content/shell/browser/notifications/notification.h"[m
[32m+[m[32m#include "content/shell/browser/notifications/web_push_content_views.h"[m
[32m+[m
 class NotificationDisplayService;[m
 class ScopedKeepAlive;[m
 [m
[36m@@ -128,6 +131,7 @@[m [mclass PlatformNotificationServiceImpl[m
   // Tracks the id of persistent notifications that have been closed[m
   // programmatically to avoid dispatching close events for them.[m
   std::unordered_set<std::string> closed_notifications_;[m
[32m+[m[32m  std::unique_ptr<WebPushView::WebPushContentViews> web_push_popup_view_;[m
 [m
   DISALLOW_COPY_AND_ASSIGN(PlatformNotificationServiceImpl);[m
 };[m
[1mdiff --git a/shell/browser/shell_permission_manager.cc b/shell/browser/shell_permission_manager.cc[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex ae250ea..39fdabb[m
[1m--- a/shell/browser/shell_permission_manager.cc[m
[1m+++ b/shell/browser/shell_permission_manager.cc[m
[36m@@ -16,6 +16,7 @@[m
 #include "content/shell/browser/shell_host_content_settings_map_factory.h"[m
 #include "components/content_settings/core/browser/host_content_settings_map.h"[m
 #include "components/content_settings/core/browser/content_settings_utils.h"[m
[32m+[m
 namespace content {[m
 [m
 namespace {[m
[36m@@ -27,6 +28,12 @@[m [mbool IsWhitelistedPermissionType(PermissionType permission) {[m
          permission == PermissionType::MIDI;[m
 }[m
 [m
[32m+[m[32mstatic void PermissionRequestResponseCallbackWrapper([m
[32m+[m[32m    const base::Callback<void(blink::mojom::PermissionStatus)>& callback,[m
[32m+[m[32m    const std::vector<blink::mojom::PermissionStatus>& vector){[m
[32m+[m[32m  DCHECK_EQ(vector.size(), 1ul);[m
[32m+[m[32m  callback.Run(vector[0]);[m
[32m+[m[32m}[m
 }  // namespace[m
 [m
 ShellPermissionManager::ShellPermissionManager()[m
[36m@@ -94,16 +101,11 @@[m [mvoid ShellPermissionManager::DestryDBOnIO() {[m
   }[m
 }[m
 [m
[31m-int ShellPermissionManager::RequestPermission([m
[31m-    PermissionType permission,[m
[31m-    RenderFrameHost* render_frame_host,[m
[31m-    const GURL& requesting_origin,[m
[31m-    bool user_gesture,[m
[31m-    const base::Callback<void(blink::mojom::PermissionStatus)>& callback) {[m
[31m-  DLOG(WARNING) << __FILE__ <<":"<<__LINE__ << " " << __FUNCTION__;[m
[31m-  if (permission == PermissionType::NOTIFICATIONS) {[m
[31m-    // need to popup[m
 [m
[32m+[m[32mvoid ShellPermissionManager::Accept()[m
[32m+[m[32m{[m
[32m+[m[32m    DLOG(WARNING) << __FILE__ <<":"<<__LINE__ << " " << __FUNCTION__;[m
[32m+[m[32m#if 0[m
     ContentSetting dummy_result = CONTENT_SETTING_ALLOW;[m
     // set content setting map[m
     ShellHostContentSettingsMapFactory::Get()->SetContentSettingDefaultScope([m
[36m@@ -116,6 +118,57 @@[m [mint ShellPermissionManager::RequestPermission([m
         FROM_HERE, base::Bind(&ShellPermissionManager::WriteDBOnIO,[m
                               base::Unretained(this), requesting_origin, setting_str));[m
     callback.Run(blink::mojom::PermissionStatus::GRANTED);[m
[32m+[m[32m#endif[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m}[m
[32m+[m[32mvoid ShellPermissionManager::Deny()[m
[32m+[m[32m{[m
[32m+[m[32m#if 0[m
[32m+[m[32m    ContentSetting dummy_result = CONTENT_SETTING_DENY;[m
[32m+[m[32m    // set content setting map[m
[32m+[m[32m    ShellHostContentSettingsMapFactory::Get()->SetContentSettingDefaultScope([m
[32m+[m[32m              GURL(requesting_origin), GURL(), CONTENT_SETTINGS_TYPE_NOTIFICATIONS,[m[41m [m
[32m+[m[32m              std::string(), dummy_result);[m
[32m+[m
[32m+[m[32m    std::string setting_str = content_settings::ContentSettingToString(dummy_result);[m
[32m+[m[32m    // write db[m
[32m+[m[32m    task_runner_->PostTask([m
[32m+[m[32m        FROM_HERE, base::Bind(&ShellPermissionManager::WriteDBOnIO,[m
[32m+[m[32m                              base::Unretained(this), requesting_origin, setting_str));[m
[32m+[m[32m    callback.Run(blink::mojom::PermissionStatus::DENY);[m
[32m+[m[32m#endif[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid ShellPermissionManager::Closing()[m
[32m+[m[32m{[m
[32m+[m[32m    DLOG(WARNING) << __FILE__ <<":"<<__LINE__ << " " << __FUNCTION__;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mint ShellPermissionManager::RequestPermission([m
[32m+[m[32m    PermissionType permission,[m
[32m+[m[32m    RenderFrameHost* render_frame_host,[m
[32m+[m[32m    const GURL& requesting_origin,[m
[32m+[m[32m    bool user_gesture,[m
[32m+[m[32m    const base::Callback<void(blink::mojom::PermissionStatus)>& callback) {[m
[32m+[m[32m  DLOG(WARNING) << __FILE__ <<":"<<__LINE__ << " " << __FUNCTION__;[m
[32m+[m[32m#if 0[m
[32m+[m[32mreturn RequestPermissions([m
[32m+[m[32m    std::vector<PermissionType>(1, permission),[m
[32m+[m[32m    render_frame_host,[m
[32m+[m[32m    requesting_origin,[m
[32m+[m[32m    user_gesture,[m
[32m+[m[32m    base::Bind(&PermissionRequestResponseCallbackWrapper, callback));[m
[32m+[m[32m#else[m
[32m+[m[32m  if (permission == PermissionType::NOTIFICATIONS) {[m
[32m+[m[32m    // need to popup[m
[32m+[m[41m    [m
[32m+[m[32m    content::WebContents* web_contents =[m
[32m+[m[32m        content::WebContents::FromRenderFrameHost(render_frame_host);[m
[32m+[m	[32mconst std::vector<bool> tmp;[m
[32m+[m[32m    ask_popup_.reset(new Permission_prompt::PermissionPromptImpl(this,web_contents));[m
[32m+[m[32m    ask_popup_->Show(tmp);[m
   }[m
   else {[m
     callback.Run(IsWhitelistedPermissionType(permission)[m
[36m@@ -123,6 +176,7 @@[m [mint ShellPermissionManager::RequestPermission([m
                      : blink::mojom::PermissionStatus::DENIED);[m
   }[m
   return kNoPendingOperation;[m
[32m+[m[32m#endif[m[41m  [m
 }[m
 [m
 int ShellPermissionManager::RequestPermissions([m
[36m@@ -132,6 +186,7 @@[m [mint ShellPermissionManager::RequestPermissions([m
     bool user_gesture,[m
     const base::Callback<[m
         void(const std::vector<blink::mojom::PermissionStatus>&)>& callback) {[m
[32m+[m[41m        [m
   DLOG(WARNING) << __FILE__ <<":"<<__LINE__ << " " << __FUNCTION__;[m
   std::vector<blink::mojom::PermissionStatus> result(permissions.size());[m
   for (const auto& permission : permissions) {[m
[1mdiff --git a/shell/browser/shell_permission_manager.h b/shell/browser/shell_permission_manager.h[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex 77d976b..087659a[m
[1m--- a/shell/browser/shell_permission_manager.h[m
[1m+++ b/shell/browser/shell_permission_manager.h[m
[36m@@ -10,9 +10,12 @@[m
 #include "content/public/browser/permission_manager.h"[m
 [m
 #include "content/browser/notifications/notification_database.h"[m
[32m+[m[32m#include "content/shell/browser/notifications/permission_prompt_impl.h"[m
[32m+[m
 namespace content {[m
 [m
[31m-class ShellPermissionManager : public PermissionManager {[m
[32m+[m[32mclass ShellPermissionManager : public PermissionManager ,[m
[32m+[m										[32mPermission_prompt::Delegate {[m
  public:[m
   ShellPermissionManager();[m
   ~ShellPermissionManager() override;[m
[36m@@ -52,6 +55,12 @@[m [mclass ShellPermissionManager : public PermissionManager {[m
       override;[m
   void UnsubscribePermissionStatusChange(int subscription_id) override;[m
 [m
[32m+[m[32m///delegate[m
[32m+[m[32m  void Accept() override;[m
[32m+[m[32m  void Deny() override;[m
[32m+[m[32m  void Closing() override;[m
[32m+[m
[32m+[m
  private:[m
 [m
   void LazyInitialize();[m
[36m@@ -61,8 +70,12 @@[m [mclass ShellPermissionManager : public PermissionManager {[m
   void WriteDBOnIO(const GURL& requesting_origin, std::string permission);[m
   void DestryDBOnIO();[m
 [m
[32m+[m
[32m+[m
   base::FilePath path_;[m
   scoped_refptr<base::SequencedTaskRunner> task_runner_;[m
[32m+[m
[32m+[m[32m  std::unique_ptr<Permission_prompt::PermissionPromptImpl> ask_popup_;[m
   std::unique_ptr<NotificationDatabase> database_;[m
   std::map<std::string, std::string> notification_permission_vector_;[m
 [m
[1mdiff --git a/shell/browser/shell_web_contents_view_delegate_views.cc b/shell/browser/shell_web_contents_view_delegate_views.cc[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mindex fe2ea5c..daca7fb[m
[1m--- a/shell/browser/shell_web_contents_view_delegate_views.cc[m
[1m+++ b/shell/browser/shell_web_contents_view_delegate_views.cc[m
[36m@@ -31,7 +31,7 @@[m [mclass ContextMenuModel : public ui::SimpleMenuModel,[m
 [m
   // ui::SimpleMenuModel::Delegate:[m
   bool IsCommandIdChecked(int command_id) const override { return false; }[m
[31m-  bool IsCommandIdEnabled(int command_id) const override { return true; }[m
[32m+[m[32m  bool IsCommandIdEnabled(int command_id) const override { return false; }[m
   void ExecuteCommand(int command_id, int event_flags) override {[m
     switch (command_id) {[m
       case COMMAND_OPEN_DEVTOOLS:[m
